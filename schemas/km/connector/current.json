{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schema.yext.com/config/km/connector",
  "$version": "1",
  "type": "object",
  "additionalProperties": false,
  "title": "Connector",
  "description": "A resource that represents the configuration of a connector.",
  "properties": {
    "$id": {
      "type": "string"
    },
    "$schema": {
      "const": "https://schema.yext.com/config/km/connector/v1"
    },
    "displayName": {
      "type": "string",
      "title": "Display Name",
      "description": "Display name of this connector."
    },
    "entityType": {
      "type": "string",
      "title": "Entity Type",
      "format": "km/entity-type",
      "description": "The entity type which data can be ingested for."
    },
    "source": {
      "type": "object",
      "additionalProperties": false,
      "title": "Source",
      "description": "Represents a combination of the configuration to fetch data \u0026 selectors to extract content from the raw data.",
      "properties": {
        "sourceConfig": {
          "type": "object",
          "additionalProperties": false,
          "title": "Source Configuration",
          "description": "Configuration for various sources of data.",
          "properties": {
            "crawlerConfig": {
              "$ref": "#/definitions/configs/crawlerConfig"
            },
            "apiPullConfig": {
              "$ref": "#/definitions/configs/apiPullConfig"
            },
            "apiPushConfig": {
              "$ref": "#/definitions/configs/apiPushConfig"
            }
          },
          "oneOf": [
            {
              "required": [
                "crawlerConfig"
              ]
            },
            {
              "required": [
                "apiPullConfig"
              ]
            },
            {
              "required": [
                "apiPushConfig"
              ]
            }
          ]
        },
        "baseSelector": {
          "$ref": "#/definitions/selector"
        },
        "selectors": {
          "type": "array",
          "additionalItems": false,
          "title": "Selectors",
          "description": "An ordered list of selectors to apply and extract data.",
          "items": {
            "$ref": "#/definitions/selector"
          }
        }
      },
      "required": [
        "sourceConfig"
      ]
    },
    "transforms": {
      "type": "array",
      "additionalItems": false,
      "title": "Transforms",
      "description": "Transforms to sequentially apply to data produced by selectors.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "title": "Transform",
        "description": "A transform to apply to the data output by the previous step.",
        "unordered": false,
        "properties": {
          "cleanDataCapitalization": {
            "$ref": "#/definitions/transform/cleanDataCapitalization"
          }
        },
        "oneOf": [
          {
            "required": [
              "cleanDataCapitalization"
            ]
          }
        ]
      }
    },
    "mappings": {
      "type": "array",
      "additionalItems": false,
      "title": "Mapping",
      "description": "The mapping generated by the transformers.",
      "items": {
        "$ref": "#/definitions/mapping"
      }
    },
    "scheduleConfig": {
      "type": "object",
      "additionalProperties": false,
      "title": "Schedule Config",
      "description": "The configuration of the run schedule.",
      "properties": {
        "useSourceSchedule": {
          "type": "boolean",
          "title": "Use Source Schedule",
          "description": "Indicates that the Connector should run automatically using the data source\u0027s schedule."
        },
        "customSchedule": {
          "$ref": "#/definitions/customSchedule"
        }
      },
      "oneOf": [
        {
          "required": [
            "useSourceSchedule"
          ]
        },
        {
          "required": [
            "customSchedule"
          ]
        }
      ]
    }
  },
  "required": [
    "$id",
    "$schema",
    "displayName",
    "entityType",
    "source"
  ],
  "definitions": {
    "configs": {
      "crawlerConfig": {
        "type": "object",
        "title": "Crawler Configuration",
        "additionalProperties": false,
        "description": "Configuration used to extract data from the crawler.",
        "properties": {
          "crawler": {
            "type": "string",
            "description": "The reference to the crawler resource.",
            "format": "crawler/site-crawler"
          },
          "urlPatterns": {
            "type": "array",
            "additionalItems": false,
            "title": "URL Patterns",
            "description": "List of URL patterns to extract data for.",
            "items": {
              "type": "string",
              "description": "The URL to extract data for."
            }
          }
        },
        "required": [
          "crawler"
        ]
      },
      "apiPullConfig": {
        "type": "object",
        "title": "API Pull Configuration",
        "additionalProperties": false,
        "description": "Configuration used to connect and pull data from an API.",
        "properties": {
          "requestType": {
            "type": "string",
            "title": "Request Type",
            "description": "The request method type.",
            "enum": [
              "GET"
            ]
          },
          "url": {
            "type": "string",
            "title": "Request URL",
            "description": "The request URL to use."
          },
          "authentication": {
            "type": "object",
            "additionalProperties": false,
            "title": "Authentication",
            "description": "The authentication mechanism to use to connect to the API.",
            "properties": {
              "bearerToken": {
                "type": "string",
                "title": "Bearer Token",
                "description": "A token that will be passed in the authorization header."
              },
              "basicAuthentication": {
                "$ref": "#/definitions/authentications/basicAuthentication"
              },
              "apiKey": {
                "$ref": "#/definitions/authentications/apiKey"
              }
            },
            "oneOf": [
              {
                "required": [
                  "bearerToken"
                ]
              },
              {
                "required": [
                  "basicAuthentication"
                ]
              },
              {
                "required": [
                  "apiKey"
                ]
              }
            ]
          },
          "paginationControl": {
            "type": "object",
            "additionalProperties": false,
            "title": "Pagination Control",
            "description": "The method used for controlling pagination.",
            "properties": {
              "maxPageCount": {
                "type": "number",
                "title": "Max Page Count",
                "description": "Max pages to fetch. If unset, all pages will be fetched."
              },
              "pageBasedPagination": {
                "$ref": "#/definitions/pagination/pageBasedPagination"
              },
              "cursorPagination": {
                "$ref": "#/definitions/pagination/cursorPagination"
              }
            },
            "oneOf": [
              {
                "required": [
                  "pageBasedPagination"
                ]
              },
              {
                "required": [
                  "cursorPagination"
                ]
              }
            ]
          },
          "maxRequestsPerMinute": {
            "type": "number",
            "title": "API Rate Limit",
            "description": "The maximum requests per minute."
          },
          "headers": {
            "type": "object",
            "additionalItems": false,
            "title": "Headers",
            "description": "Map of header keys and values to use in the API request.",
            "patternProperties": {
              "^.*$": {
                "type": "string"
              }
            }
          },
          "queryParams": {
            "type": "object",
            "additionalItems": false,
            "title": "Query Parameters",
            "description": "Map of query parameter keys and values to use in the API request.",
            "patternProperties": {
              "^.*$": {
                "type": "string"
              }
            }
          },
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          }
        },
        "required": [
          "requestType",
          "url",
          "dataFormat"
        ]
      },
      "apiPushConfig": {
        "type": "object",
        "title": "API Push Configuration",
        "additionalProperties": false,
        "description": "Configuration used to connect to an app and push data from an API.",
        "properties": {
          "app": {
            "type": "string",
            "description": "The reference to the app resource."
          },
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          }
        },
        "required": [
          "app",
          "dataFormat"
        ]
      }
    },
    "authentications": {
      "basicAuthentication": {
        "type": "object",
        "additionalProperties": false,
        "title": "Basic Authentication",
        "description": "Username and password authentication.",
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "The username."
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "The password."
          }
        },
        "required": [
          "username"
        ]
      },
      "apiKey": {
        "type": "object",
        "additionalProperties": false,
        "title": "API Key",
        "description": "An api key will be used to authenticate requests. The API-key can be appended in the header or as a query param depending on the source API.",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key used to send the token."
          },
          "value": {
            "type": "string",
            "title": "value",
            "description": "The API token content."
          },
          "setAsHeader": {
            "type": "boolean",
            "title": "Set As Header",
            "description": "Indicates if the token should be set as a header instead of a query param."
          }
        },
        "required": [
          "key",
          "value",
          "setAsHeader"
        ]
      }
    },
    "pagination": {
      "pageBasedPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Page-Based Pagination",
        "description": "Page-based pagination will increment the Page Key query parameter value until all pages are returned.",
        "properties": {
          "pageKey": {
            "type": "string",
            "title": "Page Key",
            "description": "Pagination key to be passed as a query parameter in the request."
          },
          "pageStartValue": {
            "type": "number",
            "title": "Page Key Start Value",
            "description": "Initial value for the Page Key. If specified, this value will be used as the query parameter value for the Page Key in the first request. If not specified, 0 will be used by default."
          },
          "totalPages": {
            "type": "object",
            "title": "Total Pages",
            "description": "Points to the total number of pages either in the response body or the response headers.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "title": "Key",
                "description": "The key for the total number of pages. A JMES path expression."
              },
              "inHeader": {
                "type": "boolean",
                "title": "Value is in Response Header",
                "default": false,
                "description": "Indicates if the total number pages value is located in the response headers or the response body."
              }
            },
            "required": [
              "key"
            ]
          },
          "limitKey": {
            "type": "string",
            "title": "Limit Key",
            "description": "Key to specify the max number of entries returned per page, passed as a query parameter in the request."
          },
          "limitValue": {
            "type": "number",
            "title": "Limit Value",
            "description": "Value for the Limit Key which specifies the max number of entries returned per page."
          }
        },
        "required": [
          "pageKey"
        ]
      },
      "cursorPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Cursor Pagination",
        "description": "Cursor-based pagination will look for a cursor in each response and pass it to the subsequent request to fetch the next page.",
        "properties": {
          "pageKey": {
            "type": "string",
            "title": "Page Key",
            "description": "Pagination key to be passed as a query parameter in the request."
          },
          "cursor": {
            "type": "string",
            "title": "Cursor",
            "description": "The key that contains the cursor in the response.  If detectCursorInHeader is set to true, the key will be searched for in the header.  If not set or set to false, the key will be searched for in the response body."
          },
          "cursorType": {
            "type": "string",
            "title": "Cursor Type",
            "description": "Indicates if the cursor is a Token, Relative URL or Full URL.",
            "enum": [
              "TOKEN",
              "FULL_URL",
              "RELATIVE_URL"
            ]
          },
          "detectCursorInHeader": {
            "type": "boolean",
            "title": "Detect Cursor in Header",
            "description": "Indicates if the Cursor key will be contained in the response header or the response body."
          }
        },
        "required": [
          "cursor",
          "cursorType"
        ]
      }
    },
    "dataFormat": {
      "type": "string",
      "title": "Data Format",
      "description": "The data format of the response.",
      "enum": [
        "JSON"
      ]
    },
    "transform": {
      "cleanDataCapitalization": {
        "type": "object",
        "additionalProperties": false,
        "title": "Clean Data Capitalization",
        "description": "Transforms the text of the inputted columns by applying the selected capitalization options.",
        "properties": {
          "inputHeaders": {
            "type": "array",
            "additionalProperties": false,
            "title": "Input Headers",
            "description": "The names of the columns containing values to transform.",
            "items": {
              "type": "string",
              "title": "Input Header",
              "description": "The name of the column containing values to transform."
            }
          },
          "cleanOption": {
            "type": "string",
            "title": "Clean Option",
            "description": "How the data should be cleaned.",
            "enum": [
              "ALL_CAPS",
              "ALL_LOWER",
              "PROPER_CASE"
            ]
          }
        },
        "required": [
          "inputHeaders",
          "cleanOption"
        ]
      }
    },
    "mapping": {
      "type": "object",
      "description": "The mapping generated by the transformers.",
      "header": {
        "type": "string",
        "title": "Header",
        "description": "Header of a table."
      },
      "field": {
        "type": "string",
        "title": "Field",
        "description": "The reference to the field resource.",
        "format": "km/field"
      },
      "subfieldPath": {
        "type": "array",
        "additionalItems": false,
        "description": "Path to a particular property or list item index.",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "oneOf": {
            "name": {
              "type": "string",
              "title": "Name",
              "description": "A name which identifies a struct value property."
            },
            "index": {
              "type": "number",
              "title": "Index",
              "description": "An index which identifies an item in a list value."
            }
          }
        }
      },
      "required": [
        "header",
        "field"
      ]
    },
    "selector": {
      "type": "object",
      "additionalProperties": false,
      "description": "A selector for extracting content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of data selector.",
          "enum": [
            "CSS",
            "XPATH",
            "JSON",
            "PAGE_URL",
            "PAGE_TITLE",
            "CLEANED_BODY",
            "PAGE_ID",
            "ITEM_ID"
          ]
        },
        "header": {
          "type": "string",
          "title": "Header",
          "description": "The header used to identify the extracted content."
        },
        "path": {
          "type": "string",
          "title": "Path",
          "description": "The selector content path."
        },
        "mode": {
          "type": "string",
          "description": "The selector mode of a CSS or XPath selector.",
          "enum": [
            "ALL_TEXT",
            "DIRECT_TEXT",
            "INNER_HTML",
            "URL",
            "IMAGE_URL",
            "ATTRIBUTE"
          ]
        },
        "attributeKey": {
          "type": "string",
          "title": "Attribute Key",
          "description": "The attribute key of a CSS or XPath selector."
        }
      },
      "required": [
        "type",
        "header"
      ]
    },
    "customSchedule": {
      "type": "object",
      "title": "Custom Schedule",
      "description": "The custom schedule that the connector will follow. The Connector can be configured to run daily, weekly, monthly or a custom frequency. Currently, this is only supported for API Connectors.",
      "properties": {
        "timeZone": {
          "type": "string",
          "title": "Time Zone",
          "description": "The time zone in ISO-8601 Zone-ID to start a run, i.e. America/New_York."
        },
        "startDate": {
          "type": "string",
          "title": "Start Date",
          "description": "The local date in ISO format to start scheduling runs, i.e. 2021-01-30."
        },
        "startTime": {
          "type": "string",
          "title": "Start Time",
          "description": "The local time in ISO format to start scheduling runs, i.e. 12:00:00."
        },
        "frequencyType": {
          "type": "string",
          "title": "Frequency Type",
          "description": "The schedule config frequency type.",
          "enum": [
            "DAILY",
            "MONTHLY",
            "WEEKLY"
          ]
        },
        "repeatInterval": {
          "type": "number",
          "title": "Repeat interval",
          "description": "The repeat interval based off the schedule config frequency type. If unset, a repeat interval of 1 will be used (e.g. every day)."
        }
      },
      "required": [
        "timeZone",
        "startDate",
        "startTime",
        "frequencyType"
      ]
    }
  }
}