{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://schema.yext.com/config/km/connector",
  "$version": "6",
  "type": "object",
  "additionalProperties": false,
  "title": "Connector",
  "description": "A resource that represents the configuration of a Connector.",
  "properties": {
    "$id": {
      "type": "string"
    },
    "$schema": {
      "const": "https://schema.yext.com/config/km/connector/v6"
    },
    "displayName": {
      "type": "string",
      "title": "Display Name",
      "description": "Display name of this Connector."
    },
    "source": {
      "type": "object",
      "additionalProperties": false,
      "title": "Source",
      "description": "Represents a combination of the configuration to fetch data \u0026 selectors to extract content from the raw data.",
      "properties": {
        "sourceConfig": {
          "type": "object",
          "additionalProperties": false,
          "title": "Source Configuration",
          "description": "Configuration for various sources of data.",
          "properties": {
            "crawlerConfig": {
              "$ref": "#/definitions/configs/crawlerConfig"
            },
            "apiPullConfig": {
              "$ref": "#/definitions/configs/apiPullConfig"
            },
            "apiPushConfig": {
              "$ref": "#/definitions/configs/apiPushConfig"
            },
            "functionConfig": {
              "$ref": "#/definitions/configs/functionConfig"
            },
            "nativeSourceConfig": {
              "$ref": "#/definitions/configs/nativeSourceConfig"
            },
            "fileUploadConfig": {
              "$ref": "#/definitions/configs/fileUploadConfig"
            },
            "ftpConfig": {
              "$ref": "#/definitions/configs/ftpConfig"
            }
          },
          "oneOf": [
            {
              "required": [
                "crawlerConfig"
              ]
            },
            {
              "required": [
                "apiPullConfig"
              ]
            },
            {
              "required": [
                "apiPushConfig"
              ]
            },
            {
              "required": [
                "functionConfig"
              ]
            },
            {
              "required": [
                "nativeSourceConfig"
              ]
            },
            {
              "required": [
                "fileUploadConfig"
              ]
            },
            {
              "required": [
                "ftpConfig"
              ]
            }
          ]
        },
        "baseSelector": {
          "$ref": "#/definitions/selector"
        },
        "selectors": {
          "type": "array",
          "additionalItems": false,
          "title": "Selectors",
          "description": "An ordered list of selectors to apply and extract data.",
          "items": {
            "$ref": "#/definitions/selector"
          }
        }
      },
      "required": [
        "sourceConfig"
      ]
    },
    "destinationConfig": {
      "type": "object",
      "title": "Destination Configuration",
      "description": "Defines the destination config to be used by this connector",
      "properties": {
        "apiConfig": {
          "type": "object",
          "title": "API Configuration",
          "description": "A generic API config to send data to.",
          "properties": {
            "variables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/variableDefinition"
              }
            },
            "authentication": {
              "$ref": "#/definitions/authentication"
            },
            "rateLimit": {
              "$ref": "#/definitions/rateLimit"
            },
            "endpoints": {
              "type": "object",
              "title": "Endpoints",
              "description": "The endpoints of the API configuration.",
              "additionalProperties": {
                "$ref": "#/definitions/endpointConfig"
              }
            }
          }
        },
        "contentConfig": {
          "type": "object",
          "title": "Content Configuration",
          "description": "The Yext Content configuration to push data to.",
          "properties": {
            "entityTypes": {
              "type": "array",
              "title": "Entity Types",
              "additionalItems": false,
              "description": "The Entity Types of the entities managed by the Connector.",
              "items": {
                "type": "string",
                "title": "Entity Type",
                "format": "km/entity-type"
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false,
      "oneOf": [
        {
          "required": [
            "apiConfig"
          ]
        },
        {
          "required": [
            "contentConfig"
          ]
        }
      ],
      "maxProperties": 1
    },
    "transforms": {
      "$ref": "#/definitions/transforms"
    },
    "mappings": {
      "type": "array",
      "additionalItems": false,
      "title": "Mapping",
      "description": "The mapping generated by the transformers.",
      "items": {
        "$ref": "#/definitions/mapping"
      }
    },
    "scheduleConfig": {
      "type": "object",
      "additionalProperties": false,
      "title": "Schedule Config",
      "description": "The configuration of the run schedule.",
      "properties": {
        "useSourceSchedule": {
          "type": "boolean",
          "title": "Use Source Schedule",
          "description": "Indicates that the Connector should run automatically using the data source\u0027s schedule."
        },
        "customSchedule": {
          "$ref": "#/definitions/customSchedule"
        },
        "runMode": {
          "$ref": "#/definitions/runMode"
        },
        "dryRun": {
          "$ref": "#/definitions/dryRun"
        }
      },
      "oneOf": [
        {
          "required": [
            "useSourceSchedule"
          ]
        },
        {
          "required": [
            "customSchedule"
          ]
        }
      ]
    },
    "runBreakers": {
      "type": "array",
      "additionalProperties": false,
      "title": "Run Breakers",
      "description": "The configuration of the set of conditions that will break your run and prevent changes to the Knowledge Graph.",
      "items": {
        "$ref": "#/definitions/runBreaker"
      }
    },
    "comprehensiveModeConfig": {
      "type": "object",
      "additionalProperties": false,
      "title": "Comprehensive Mode Config",
      "description": "The configuration for running the Connector in Comprehensive Mode.",
      "properties": {
        "comprehensiveSet": {
          "title": "Comprehensive Set",
          "description": "The comprehensive set of entities used to determine entities that are missing.",
          "additionalProperties": false,
          "type": "string",
          "default": "ENTITIES_CREATED_BY_THIS_CONNECTOR",
          "enum": [
            "ENTITIES_CREATED_BY_THIS_CONNECTOR",
            "ENTITIES_IN_SAVED_FILTER"
          ]
        },
        "savedFilter": {
          "type": "string",
          "title": "Saved Filter",
          "description": "The reference to the saved filter resources if missing set type is set to ENTITIES_IN_SAVED_FILTER",
          "format": "km/saved-filter"
        },
        "actionOnMissingEntities": {
          "title": "Action on Missing Entities",
          "description": "Specifies whether entities missing from the comprehensive set should be deleted or updated when running the Connector in Comprehensive Mode.",
          "type": "string",
          "default": "DELETE",
          "enum": [
            "DELETE",
            "UPDATE"
          ]
        },
        "missingUpdateConfig": {
          "type": "object",
          "title": "Missing Update Config",
          "description": "The configuration to update entities missing from the comprehensive set IF the action is \u0027UPDATE\u0027.",
          "additionalProperties": false,
          "properties": {
            "selectors": {
              "type": "array",
              "additionalItems": false,
              "title": "Selectors",
              "description": "An ordered list of selectors to apply and extract from your set of missing entities",
              "items": {
                "$ref": "#/definitions/selector"
              }
            },
            "transforms": {
              "$ref": "#/definitions/transforms"
            },
            "mappings": {
              "type": "array",
              "additionalItems": false,
              "title": "Mapping",
              "description": "The mapping of columns to fields in Knowledge Graph",
              "items": {
                "$ref": "#/definitions/mapping"
              }
            }
          }
        }
      },
      "required": [
        "comprehensiveSet",
        "actionOnMissingEntities"
      ],
      "allOf": [
        {
          "anyOf": [
            {
              "properties": {
                "comprehensiveSet": {
                  "const": "ENTITIES_IN_SAVED_FILTER"
                }
              },
              "required": [
                "savedFilter"
              ]
            },
            {
              "properties": {
                "comprehensiveSet": {
                  "const": "ENTITIES_CREATED_BY_THIS_CONNECTOR"
                }
              },
              "required": []
            }
          ]
        },
        {
          "anyOf": [
            {
              "properties": {
                "actionOnMissingEntities": {
                  "const": "UPDATE"
                }
              },
              "required": [
                "missingUpdateConfig"
              ]
            },
            {
              "properties": {
                "actionOnMissingEntities": {
                  "const": "DELETE"
                }
              },
              "required": []
            }
          ]
        }
      ]
    },
    "linkedConnectorConfigs": {
      "type": "array",
      "additionalProperties": false,
      "title": "Linked Connector Configs",
      "description": "The list of configurations of linked connectors\u0027 completed run triggering this connector to run.",
      "items": {
        "$ref": "#/definitions/linkedConnectorConfig"
      }
    }
  },
  "required": [
    "$id",
    "$schema",
    "displayName",
    "source"
  ],
  "definitions": {
    "authentication": {
      "type": "object",
      "additionalProperties": false,
      "title": "Authentication",
      "description": "The authentication mechanism to use to connect to the API.",
      "properties": {
        "bearerToken": {
          "type": "string",
          "title": "Bearer Token",
          "description": "A token that will be passed in the authorization header."
        },
        "basicAuthentication": {
          "$ref": "#/definitions/authentications/basicAuthentication"
        },
        "apiKey": {
          "$ref": "#/definitions/authentications/apiKey"
        },
        "oauth": {
          "$ref": "#/definitions/authentications/oauth"
        }
      },
      "oneOf": [
        {
          "required": [
            "bearerToken"
          ]
        },
        {
          "required": [
            "basicAuthentication"
          ]
        },
        {
          "required": [
            "apiKey"
          ]
        },
        {
          "required": [
            "oauth"
          ]
        }
      ]
    },
    "rateLimit": {
      "type": "object",
      "additionalItems": false,
      "title": "API Rate Limit",
      "description": "The maximum requests that can be made in a specified unit of time.",
      "properties": {
        "unit": {
          "type": "string",
          "title": "Time Unit",
          "description": "The unit of time per which the specified quantity of requests can be sent.",
          "enum": [
            "SECOND",
            "MINUTE",
            "HOUR"
          ]
        },
        "quantity": {
          "type": "number",
          "title": "Request Quantity",
          "description": "The maximum number of requests that may be sent in the specified unit of time."
        }
      },
      "required": [
        "unit",
        "quantity"
      ]
    },
    "configs": {
      "crawlerConfig": {
        "type": "object",
        "title": "Crawler Configuration",
        "additionalProperties": false,
        "description": "Configuration used to extract data from the crawler.",
        "properties": {
          "crawler": {
            "type": "string",
            "description": "The reference to the crawler resource.",
            "format": "crawler/site-crawler"
          },
          "urlPatterns": {
            "type": "array",
            "additionalItems": false,
            "title": "URL Patterns",
            "description": "List of URL patterns to extract data for.",
            "items": {
              "type": "string",
              "description": "The URL to extract data for."
            }
          },
          "fileTypes": {
            "type": "array",
            "title": "File Types",
            "description": "Specifies which file types to include in your Connector if present in your selected crawler. This setting does not have to match your crawler settings",
            "default": [
              "HTML"
            ],
            "minItems": 1,
            "items": {
              "type": "string",
              "enum": [
                "HTML",
                "PDF"
              ]
            }
          }
        },
        "required": [
          "crawler"
        ]
      },
      "apiPullConfig": {
        "type": "object",
        "title": "API Pull Configuration",
        "additionalProperties": false,
        "description": "Configuration used to connect and pull data from an API.",
        "properties": {
          "requestType": {
            "type": "string",
            "title": "Request Type",
            "description": "The request method type.",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "url": {
            "type": "string",
            "title": "Request URL",
            "description": "The request URL to use."
          },
          "requestBody": {
            "type": "object",
            "additionalProperties": false,
            "title": "Request Body",
            "description": "The request body used to make a POST request.",
            "properties": {
              "contentType": {
                "type": "string",
                "title": "Content Type",
                "description": "The Content-Type used to describe the request body."
              },
              "value": {
                "type": "string",
                "title": "Value",
                "description": "The value of the request body."
              }
            },
            "required": [
              "contentType",
              "value"
            ]
          },
          "authentication": {
            "$ref": "#/definitions/authentication"
          },
          "paginationControl": {
            "type": "object",
            "additionalProperties": false,
            "title": "Pagination Control",
            "description": "The method used for controlling pagination.",
            "properties": {
              "maxPageCount": {
                "type": "number",
                "title": "Max Page Count",
                "description": "Max pages to fetch. If unset, all pages will be fetched."
              },
              "pageBasedPagination": {
                "$ref": "#/definitions/pagination/pageBasedPagination"
              },
              "cursorPagination": {
                "$ref": "#/definitions/pagination/cursorPagination"
              },
              "linkHeaderPagination": {
                "$ref": "#/definitions/pagination/linkHeaderPagination"
              },
              "offsetPagination": {
                "$ref": "#/definitions/pagination/offsetPagination"
              }
            },
            "oneOf": [
              {
                "required": [
                  "pageBasedPagination"
                ]
              },
              {
                "required": [
                  "cursorPagination"
                ]
              },
              {
                "required": [
                  "linkHeaderPagination"
                ]
              },
              {
                "required": [
                  "offsetPagination"
                ]
              }
            ]
          },
          "rateLimit": {
            "$ref": "#/definitions/rateLimit"
          },
          "headers": {
            "type": "object",
            "additionalItems": false,
            "title": "Headers",
            "description": "Map of header keys and values to use in the API request.",
            "patternProperties": {
              "^.*$": {
                "type": "string"
              }
            }
          },
          "queryParams": {
            "type": "object",
            "additionalItems": false,
            "title": "Query Parameters",
            "description": "Map of query parameter keys and values to use in the API request.",
            "patternProperties": {
              "^.*$": {
                "type": "string"
              }
            }
          },
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          }
        },
        "required": [
          "requestType",
          "url",
          "dataFormat"
        ]
      },
      "apiPushConfig": {
        "type": "object",
        "title": "API Push Configuration",
        "additionalProperties": false,
        "description": "Configuration used to connect to an app and receive data pushed to the Connectors API endpoint.",
        "properties": {
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "If enabled, a new run will be initiated every time a request is sent to this Connector and the data provided in the request will be processed."
          }
        },
        "required": [
          "dataFormat"
        ]
      },
      "functionConfig": {
        "type": "object",
        "title": "Function Configuration",
        "additionalProperties": false,
        "description": "Configuration used to invoke a function.",
        "properties": {
          "plugin": {
            "type": "string",
            "title": "Plugin",
            "description": "The reference to a Plugin resource that contains a desired function.",
            "format": "platform/plugin"
          },
          "function": {
            "type": "string",
            "title": "Function",
            "description": "The function to invoke."
          },
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          }
        },
        "required": [
          "plugin",
          "function",
          "dataFormat"
        ]
      },
      "nativeSourceConfig": {
        "type": "object",
        "title": "Native Source Configuration",
        "additionalProperties": false,
        "description": "Configuration used to extract data from a native data source.",
        "properties": {
          "source": {
            "type": "string",
            "title": "Source",
            "description": "The reference to the native source."
          },
          "operation": {
            "type": "string",
            "title": "Operation",
            "description": "The method that determines what data to fetch from the native source."
          },
          "inputs": {
            "type": "object",
            "title": "Inputs",
            "description": "User-provided inputs required to extract data from the native source.",
            "additionalProperties": true
          }
        },
        "required": [
          "source",
          "operation",
          "inputs"
        ]
      },
      "fileUploadConfig": {
        "type": "object",
        "title": "File Upload Configuration",
        "additionalProperties": false,
        "description": "Configuration used to extract data from your uploaded file.",
        "properties": {
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          },
          "config": {
            "type": "object",
            "title": "Config",
            "additionalProperties": false,
            "description": "Specifies configuration on how a file should be processed.",
            "properties": {
              "csv": {
                "$ref": "#/definitions/fileType/csvConfig"
              },
              "excel": {
                "$ref": "#/definitions/fileType/excelConfig"
              }
            },
            "oneOf": [
              {
                "required": [
                  "csv"
                ]
              },
              {
                "required": [
                  "excel"
                ]
              }
            ]
          }
        },
        "required": [
          "dataFormat"
        ]
      },
      "ftpConfig": {
        "type": "object",
        "title": "FTP/SFTP Configuration",
        "additionalProperties": false,
        "description": "Configuration used to extract data from files fetched from your remote Server.",
        "properties": {
          "protocol": {
            "type": "string",
            "title": "Protocol",
            "description": "The protocol to use for establishing connection to your Server.",
            "enum": [
              "SFTP",
              "FTPS",
              "FTP"
            ]
          },
          "host": {
            "type": "string",
            "title": "Host",
            "description": "The host address without the protocol."
          },
          "port": {
            "type": "number",
            "title": "Port",
            "description": "The port of your Server (default 21 for FTP, 990 for FTPS or 22 for SFTP)."
          },
          "username": {
            "type": "string",
            "title": "Username",
            "description": "The username to authenticate access to the Server."
          },
          "credential": {
            "type": "object",
            "title": "Credential",
            "description": "The credential method to authenticate access to the Server, either via password or an SSH Private Key.",
            "properties": {
              "password": {
                "type": "string",
                "title": "Password",
                "description": "The password to authenticate access to the Server."
              },
              "sshPrivateKey": {
                "type": "string",
                "title": "SSH Private Key",
                "description": "The SSH Private Key that will grant access to the Server."
              }
            },
            "oneOf": [
              {
                "required": [
                  "password"
                ]
              },
              {
                "required": [
                  "sshPrivateKey"
                ]
              }
            ]
          },
          "fileLocation": {
            "type": "object",
            "additionalProperties": false,
            "title": "File Location",
            "description": "The file location in the Server, including the file extension.",
            "properties": {
              "exactFilePath": {
                "type": "string",
                "title": "File Path",
                "description": "The exact path to a specific file in your Server."
              },
              "searchByCriteria": {
                "$ref": "#/definitions/searchByCriteria"
              }
            },
            "oneOf": [
              {
                "required": [
                  "exactFilePath"
                ]
              },
              {
                "required": [
                  "searchByCriteria"
                ]
              }
            ]
          },
          "dataFormat": {
            "$ref": "#/definitions/dataFormat"
          },
          "config": {
            "type": "object",
            "title": "Config",
            "additionalProperties": false,
            "description": "Specifies configuration on how a file should be processed.",
            "properties": {
              "csv": {
                "$ref": "#/definitions/fileType/csvConfig"
              },
              "excel": {
                "$ref": "#/definitions/fileType/excelConfig"
              }
            },
            "oneOf": [
              {
                "required": [
                  "csv"
                ]
              },
              {
                "required": [
                  "excel"
                ]
              }
            ]
          }
        },
        "required": [
          "protocol",
          "host",
          "username",
          "credential",
          "fileLocation",
          "dataFormat"
        ]
      }
    },
    "fileType": {
      "hasHeader": {
        "type": "boolean",
        "additionalProperties": false,
        "default": true,
        "title": "Has Header Row",
        "description": "Specify if the first row of your data contains the headers for your columns."
      },
      "excelConfig": {
        "type": "object",
        "additionalProperties": false,
        "title": "Excel File",
        "description": "Configuration settings to extract data from your Excel file",
        "properties": {
          "hasHeader": {
            "$ref": "#/definitions/fileType/hasHeader"
          },
          "sheetIndices": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "integer"
            },
            "default": [
              0
            ],
            "title": "Sheet Indices",
            "description": "Specify the indices of the sheets to extract from your excel file. If left empty, the entire workbook will be extracted."
          },
          "sheetMergeMode": {
            "type": "string",
            "additionalProperties": false,
            "title": "Merge Sheets Horizontally or Vertically",
            "description": "If multiple worksheets are present, choose to merge sheets horizontally or vertically.",
            "default": "HORIZONTAL",
            "enum": [
              "HORIZONTAL",
              "VERTICAL"
            ]
          }
        }
      },
      "csvConfig": {
        "type": "object",
        "additionalProperties": false,
        "title": "CSV File",
        "description": "Configuration settings to extract data from your CSV file or any delimited file",
        "properties": {
          "columnDelimiter": {
            "type": "string",
            "additionalProperties": false,
            "default": ",",
            "title": "Column Delimiter",
            "description": "Specify the delimiter of your file. By default, a comma will be used."
          },
          "hasHeader": {
            "$ref": "#/definitions/fileType/hasHeader"
          }
        }
      }
    },
    "authentications": {
      "basicAuthentication": {
        "type": "object",
        "additionalProperties": false,
        "title": "Basic Authentication",
        "description": "Username and password authentication.",
        "properties": {
          "username": {
            "type": "string",
            "title": "Username",
            "description": "The username."
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "The password."
          }
        },
        "required": [
          "username"
        ]
      },
      "apiKey": {
        "type": "object",
        "additionalProperties": false,
        "title": "API Key",
        "description": "An API key will be used to authenticate requests. The API-key can be appended in the header or as a query param depending on the source API.",
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The key used to send the token."
          },
          "value": {
            "type": "string",
            "title": "value",
            "description": "The API token content."
          },
          "setAsHeader": {
            "type": "boolean",
            "title": "Set As Header",
            "description": "Indicates if the token should be set as a header instead of a query param."
          }
        },
        "required": [
          "key",
          "value",
          "setAsHeader"
        ]
      },
      "oauth": {
        "type": "object",
        "additionalProperties": false,
        "title": "OAuth 2.0",
        "description": "OAuth 2.0 authentication using Linked Accounts.",
        "properties": {
          "linkedAccount": {
            "type": "string",
            "title": "Linked Account",
            "description": "A reference to the linked account."
          }
        },
        "required": [
          "linkedAccount"
        ]
      }
    },
    "pagination": {
      "pageBasedPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Page-Based Pagination",
        "description": "Page-based pagination will increment the page key query parameter value until all pages are returned.",
        "properties": {
          "pageKey": {
            "type": "string",
            "title": "Page Key",
            "description": "Pagination key to be passed as a query parameter in the request."
          },
          "pageStartValue": {
            "type": "number",
            "title": "Page Key Start Value",
            "description": "Initial value for the page key. If specified, this value will be used as the query parameter value for the Page Key in the first request. If not specified, 0 will be used by default."
          },
          "totalPages": {
            "type": "object",
            "title": "Total Pages",
            "description": "Points to the total number of pages either in the response body or the response headers.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "title": "Key",
                "description": "The key for the total number of pages. A JMES path expression."
              },
              "inHeader": {
                "type": "boolean",
                "title": "Value is in Response Header",
                "default": false,
                "description": "Indicates if the total number pages value is located in the response headers or the response body."
              }
            },
            "required": [
              "key"
            ]
          },
          "limitKey": {
            "type": "string",
            "title": "Limit Key",
            "description": "Key to specify the max number of entries returned per page, passed as a query parameter in the request."
          },
          "limitValue": {
            "type": "number",
            "title": "Limit Value",
            "description": "Value for the limit key which specifies the max number of entries returned per page."
          }
        },
        "required": [
          "pageKey"
        ]
      },
      "cursorPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Cursor Pagination",
        "description": "Cursor-based pagination will look for a cursor in each response and pass it to the subsequent request to fetch the next page.",
        "properties": {
          "pageKey": {
            "type": "string",
            "title": "Page Key",
            "description": "Pagination key to be passed as a query parameter in the request."
          },
          "cursor": {
            "type": "string",
            "title": "Cursor",
            "description": "The key that contains the cursor in the response. If detectCursorInHeader is set to true, the key will be searched for in the header. If not set or set to false, the key will be searched for in the response body."
          },
          "cursorType": {
            "type": "string",
            "title": "Cursor Type",
            "description": "Indicates if the cursor is a Token, Relative URL or Full URL.",
            "enum": [
              "TOKEN",
              "FULL_URL",
              "RELATIVE_URL"
            ]
          },
          "detectCursorInHeader": {
            "type": "boolean",
            "title": "Detect Cursor in Header",
            "description": "Indicates if the cursor key will be contained in the response header or the response body."
          }
        },
        "required": [
          "cursor",
          "cursorType"
        ]
      },
      "linkHeaderPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Link Header Pagination",
        "description": "Link header pagination will use a link with a specified relation provided in the response header to fetch the next page.",
        "properties": {
          "relationLabel": {
            "type": "string",
            "title": "Relation Label",
            "description": "The label of the link that should be used. In most cases, this will be \"next\"."
          },
          "linkType": {
            "type": "string",
            "title": "Link Type",
            "description": "Indicates if the link is a full URL or a relative URL.",
            "enum": [
              "FULL_URL",
              "RELATIVE_URL"
            ],
            "default": "FULL_URL"
          }
        },
        "required": [
          "relationLabel"
        ]
      },
      "offsetPagination": {
        "type": "object",
        "additionalProperties": false,
        "title": "Offset Pagination",
        "description": "Offset pagination will use the offset and limit query parameters to paginate through all the items in a collection.",
        "properties": {
          "offsetKey": {
            "type": "string",
            "title": "Offset Key",
            "description": "Offset key to be passed as a query parameter in the request."
          },
          "limitKey": {
            "type": "string",
            "title": "Limit Key",
            "description": "Key to specify the max number of entries returned per page, passed as a query parameter in the request."
          },
          "offsetStartValue": {
            "type": "number",
            "title": "Offset Start Value",
            "description": "Value for the offset to be used in the initial request.",
            "default": 0
          },
          "limitValue": {
            "type": "number",
            "title": "Limit Value",
            "description": "Value for the limit which specifies the max number of entries returned per page."
          },
          "totalPages": {
            "type": "object",
            "title": "Total Pages",
            "description": "Points to the total number of pages either in the response body or the response headers.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "title": "Key",
                "description": "The key for the total number of pages. A JMES path expression."
              },
              "inHeader": {
                "type": "boolean",
                "title": "Value is in Response Header",
                "default": false,
                "description": "Indicates if the total number of pages value is located in the response headers or the response body."
              }
            },
            "required": [
              "key"
            ]
          },
          "totalItems": {
            "type": "object",
            "title": "Total Items",
            "description": "Points to the total number of items either in the response body or the response headers.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string",
                "title": "Key",
                "description": "The key for the total number of items. A JMES path expression."
              },
              "inHeader": {
                "type": "boolean",
                "title": "Value is in Response Header",
                "default": false,
                "description": "Indicates if the total number of items value is located in the response headers or the response body."
              }
            },
            "required": [
              "key"
            ]
          }
        },
        "required": [
          "offsetKey",
          "limitKey"
        ],
        "not": {
          "required": [
            "totalPages",
            "totalItems"
          ]
        }
      }
    },
    "dataFormat": {
      "type": "string",
      "title": "Data Format",
      "description": "The data format of the response.",
      "enum": [
        "JSON",
        "EXCEL",
        "CSV"
      ]
    },
    "transform": {
      "applyTemplateFields": {
        "type": "object",
        "additionalProperties": false,
        "title": "Apply Template Fields",
        "description": "Applies the data stored in a template to your data.",
        "properties": {
          "template": {
            "type": "string",
            "title": "Template",
            "description": "The template in your account to apply.",
            "format": "km/entity-template"
          },
          "fieldHeaderMappings": {
            "type": "array",
            "title": "Field to Header Mappings",
            "additionalItems": false,
            "description": "The Column headers that should be populated via the fields in the template.",
            "items": {
              "$ref": "#/definitions/fieldHeaderMapping"
            }
          }
        },
        "required": [
          "fieldHeaderMappings",
          "template"
        ]
      },
      "inputHeaders": {
        "type": "object",
        "additionalProperties": false,
        "title": "Input Headers",
        "description": "Specifies which columns should have their values transformed.",
        "properties": {
          "headers": {
            "type": "array",
            "additionalProperties": false,
            "title": "Headers",
            "description": "The names of the columns containing values to transform.",
            "items": {
              "type": "string",
              "title": "Header",
              "description": "The name of the column containing values to transform."
            }
          },
          "allColumns": {
            "const": true,
            "additionalProperties": false,
            "title": "All Columns",
            "description": "True if all columns should be transformed, including any added in the future."
          }
        },
        "oneof": [
          {
            "required": [
              "headers"
            ]
          },
          {
            "required": [
              "allColumns"
            ]
          }
        ]
      },
      "valueToFind": {
        "type": "object",
        "additionalProperties": false,
        "title": "Value to Find",
        "description": "The pattern or text to be replaced.",
        "properties": {
          "plainText": {
            "type": "object",
            "additionalProperties": false,
            "title": "Plain Text",
            "description": "A literal text value to be matched. If the value is the empty string, only empty cells in the input columns will be matched.",
            "properties": {
              "value": {
                "type": "string",
                "title": "Value",
                "description": "Text to be matched."
              },
              "ignoreCase": {
                "type": "boolean",
                "default": false,
                "title": "Ignore Case",
                "description": "True if matching should be case-insensitive, false otherwise."
              }
            },
            "required": [
              "value"
            ]
          },
          "regex": {
            "type": "string",
            "title": "Regex",
            "description": "Regular expression to be matched (in accordance with the java.util.regex engine)."
          }
        },
        "oneof": [
          {
            "required": [
              "plainText"
            ]
          },
          {
            "required": [
              "regex"
            ]
          }
        ]
      },
      "fixCapitalization": {
        "type": "object",
        "additionalProperties": false,
        "title": "Fix Capitalization",
        "description": "Transforms the text of the input columns by applying the selected capitalization option.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "cleanOption": {
            "type": "string",
            "title": "Clean Option",
            "description": "The clean option to be applied.",
            "enum": [
              "ALL_CAPS",
              "ALL_LOWER",
              "PROPER_CASE"
            ]
          }
        },
        "required": [
          "inputHeaders",
          "cleanOption"
        ]
      },
      "removeUnwantedChars": {
        "type": "object",
        "additionalProperties": false,
        "title": "Unwanted Characters Removal",
        "description": "Transforms the text of the input columns by applying the selected character removal options.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "cleanOptions": {
            "type": "array",
            "title": "Clean Options",
            "description": "How the data should be cleaned.",
            "uniqueItems": true,
            "additionalProperties": false,
            "items": {
              "type": "string",
              "title": "Unwanted Character Removal Options",
              "description": "The unwanted character removal options to be applied.",
              "enum": [
                "TRIM_WHITESPACE",
                "REMOVE_WHITESPACE",
                "REMOVE_NUMBERS",
                "REMOVE_NON_NUMERICS",
                "REMOVE_PUNCTUATION"
              ]
            }
          }
        },
        "required": [
          "inputHeaders",
          "cleanOptions"
        ]
      },
      "extractText": {
        "type": "object",
        "additionalProperties": false,
        "title": "Extract Text",
        "description": "Transforms the text of the input column by extracting text and creating a new column.",
        "properties": {
          "inputHeader": {
            "type": "string",
            "title": "Input Column Header",
            "description": "The header of the column from which text should be extracted"
          },
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The header for the new column that will be populated with extracted data"
          },
          "extractOperation": {
            "type": "string",
            "title": "The Extraction Operation",
            "description": "The strategy to be used when determining how much of the text to extract.",
            "enum": [
              "ALL_TEXT_AFTER",
              "ALL_TEXT_BEFORE",
              "SOME_TEXT_AFTER",
              "SOME_TEXT_BEFORE"
            ]
          },
          "extractFrom": {
            "type": "string",
            "title": "The Extraction Location",
            "description": "From where the extraction operation should occur",
            "enum": [
              "FIRST_INSTANCE_MATCHING_TEXT",
              "LAST_INSTANCE_MATCHING_TEXT",
              "OFFSET_FROM_BEGINNING",
              "OFFSET_FROM_END"
            ]
          },
          "valueToFind": {
            "$ref": "#/definitions/transform/valueToFind"
          },
          "offsetLength": {
            "type": "number",
            "title": "The Extraction Offset",
            "description": "How many characters from the starting point that the extraction should begin."
          },
          "maxLengthTextToKeep": {
            "type": "number",
            "title": "The Extraction Length",
            "description": "The max number of characters that should be extracted. No limit if 0 or unspecified."
          }
        },
        "required": [
          "inputHeader",
          "newColumnHeader",
          "extractOperation",
          "extractFrom"
        ],
        "anyOf": [
          {
            "if": {
              "properties": {
                "extractFrom": {
                  "pattern": "[*_INSTANCE_MATCHING_TEXT]"
                }
              }
            },
            "then": {
              "required": [
                "valueToFind"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "extractFrom": {
                  "pattern": "[OFFSET_FROM_*]"
                }
              }
            },
            "then": {
              "required": [
                "offsetLength"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "extractOperation": {
                  "pattern": "[SOME_TEXT_*]"
                }
              }
            },
            "then": {
              "required": [
                "maxLengthTextToKeep"
              ]
            }
          }
        ]
      },
      "function": {
        "type": "object",
        "additionalProperties": false,
        "title": "Function",
        "description": "Invokes a function to transform values.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "plugin": {
            "type": "string",
            "title": "Plugin",
            "description": "The reference to a Plugin resource that contains a desired function.",
            "format": "platform/plugin"
          },
          "function": {
            "type": "string",
            "title": "Function",
            "description": "The function to invoke."
          }
        },
        "required": [
          "inputHeaders",
          "plugin",
          "function"
        ]
      },
      "findAndReplace": {
        "type": "object",
        "additionalProperties": false,
        "title": "Find and Replace",
        "description": "Finds a specified pattern or text and replaces it with a specified value.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "valuesToFind": {
            "type": "array",
            "additionalItems": false,
            "title": "Values To Find",
            "description": "A list of all the values to match against",
            "items": {
              "$ref": "#/definitions/transform/valueToFind"
            }
          },
          "replacement": {
            "type": "string",
            "title": "Replacement",
            "description": "The text that will replace all found matches. If the replacement value is the empty string, the transform will clear all values that match the valueToFind."
          },
          "useAsNonLiteralReplacement": {
            "type": "boolean",
            "additionalProperties": false,
            "default": false,
            "title": "Use as Non Literal Replacement",
            "description": "If true, $ and \\ will be treated as special characters."
          }
        },
        "required": [
          "inputHeaders",
          "valuesToFind",
          "replacement"
        ]
      },
      "addColumn": {
        "type": "object",
        "additionalProperties": false,
        "title": "Add Column",
        "description": "Adds a new column and populate the column with a static value",
        "properties": {
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The new column\u0027s header."
          },
          "columnValue": {
            "type": "string",
            "title": "Column Value",
            "description": "The column value to be added."
          }
        },
        "required": [
          "newColumnHeader",
          "columnValue"
        ]
      },
      "filterRows": {
        "type": "object",
        "additionalProperties": false,
        "title": "Filter Rows",
        "description": "Filters rows based on specified conditionals.",
        "properties": {
          "action": {
            "type": "string",
            "title": "The Row Action",
            "description": "The action to perform on rows that satisfy the evaluation of rules.",
            "enum": [
              "KEEP",
              "REMOVE"
            ]
          },
          "combinator": {
            "type": "string",
            "title": "The Rule Combinator",
            "description": "The combinator connecting all rules.",
            "enum": [
              "OR",
              "AND"
            ]
          },
          "rules": {
            "type": "array",
            "additionalItems": false,
            "title": "The Rules to Apply",
            "description": "A list of rules to be applied to filter rows.",
            "unordered": true,
            "minItems": 1,
            "items": {
              "$ref": "#/definitions/transform/rule"
            }
          }
        },
        "required": [
          "action",
          "combinator",
          "rules"
        ]
      },
      "rule": {
        "type": "object",
        "additionalProperties": false,
        "title": "Filter Row Sub Rule",
        "description": "A single rule to be applied to filter row.",
        "properties": {
          "columnHeader": {
            "type": "string",
            "title": "The Column Header",
            "description": "The column header to which to apply the rule."
          },
          "conditional": {
            "type": "string",
            "title": "The Conditional",
            "description": "The conditional to apply. For conditionals that compare values, the value being processed is on the left, and the conditional input is on the right. When data is in the format of numbers or dates in ISO format (YYYY-MM-DD), they will be compared as numbers or dates respectively. Otherwise, they will be compared as strings",
            "enum": [
              "IS_BLANK",
              "IS_NOT_BLANK",
              "EQUALS",
              "DOES_NOT_EQUAL",
              "CONTAINS",
              "DOES_NOT_CONTAIN",
              "GREATER_THAN",
              "GREATER_THAN_OR_EQUAL_TO",
              "LESS_THAN",
              "LESS_THAN_OR_EQUAL_TO"
            ]
          },
          "conditionalInput": {
            "type": "string",
            "title": "The Conditional Input",
            "description": "The conditional input value to apply the conditional against."
          }
        },
        "required": [
          "columnHeader",
          "conditional"
        ],
        "anyOf": [
          {
            "if": {
              "properties": {
                "conditional": {
                  "const": "IS_BLANK"
                }
              }
            },
            "else": {
              "required": [
                "conditionalInput"
              ]
            }
          },
          {
            "if": {
              "properties": {
                "conditional": {
                  "const": "IS_NOT_BLANK"
                }
              }
            },
            "else": {
              "required": [
                "conditionalInput"
              ]
            }
          }
        ]
      },
      "formatDates": {
        "type": "object",
        "additionalProperties": false,
        "title": "Format Dates",
        "description": "Formats dates of the specified input into yyyy-MM-dd",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "inputFormat": {
            "type": "string",
            "title": "Input Format",
            "description": "The date format pattern of the input values (in accordance with java.time.format.DateTimeFormatter)."
          },
          "inputLocale": {
            "type": "string",
            "title": "Input Locale",
            "description": "The locale of the input values."
          }
        },
        "required": [
          "inputHeaders"
        ]
      },
      "mergeColumns": {
        "type": "object",
        "additionalProperties": false,
        "title": "Merge Columns",
        "description": "Merges multiple columns together into a new column separated by a specified delimiter.",
        "properties": {
          "inputHeaders": {
            "type": "array",
            "additionalProperties": false,
            "title": "Input Headers",
            "description": "The names of the columns to merge together.",
            "items": {
              "type": "string",
              "title": "Header",
              "description": "The name of the column containing values to merge."
            }
          },
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The new column\u0027s header."
          },
          "delimiter": {
            "type": "string",
            "title": "Delimiter",
            "description": "The delimiter that separates the merged columns\u0027 values."
          }
        },
        "required": [
          "inputHeaders",
          "newColumnHeader",
          "delimiter"
        ]
      },
      "splitColumn": {
        "type": "object",
        "additionalProperties": false,
        "title": "Split Column",
        "description": "Split a column into one or more columns based on a specified delimiter.",
        "properties": {
          "inputHeader": {
            "type": "string",
            "title": "Input Column Header",
            "description": "The column containing the data that needs to be split."
          },
          "newColumnHeaders": {
            "type": "array",
            "additionalProperties": false,
            "title": "New Column Headers",
            "description": "The names of the columns to split into.",
            "items": {
              "type": "string",
              "title": "Header",
              "description": "The name of the column containing split values."
            }
          },
          "delimiter": {
            "type": "string",
            "title": "Delimiter",
            "description": "The delimiter used to split the column\u0027s value into new ones."
          }
        },
        "required": [
          "inputHeader",
          "newColumnHeaders",
          "delimiter"
        ]
      },
      "fillInEmptyCells": {
        "type": "object",
        "additionalProperties": false,
        "title": "Fill in Empty Cells",
        "description": "Finds empty cells and fills them in with a specified default value.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The text that will replace all empty cells."
          }
        },
        "required": [
          "inputHeaders",
          "value"
        ]
      },
      "splitIntoRows": {
        "type": "object",
        "additionalProperties": false,
        "title": "Split Into Rows",
        "description": "Splits a column into one or more rows based on a specified delimiter.",
        "properties": {
          "inputHeaders": {
            "type": "array",
            "additionalProperties": false,
            "title": "Input Headers",
            "description": "The headers of the columns containing the values to split.",
            "items": {
              "type": "string",
              "title": "Header",
              "description": "The name of the column containing values to split."
            }
          },
          "delimiter": {
            "type": "string",
            "title": "Delimiter",
            "description": "The character on which the values should be split."
          }
        },
        "required": [
          "inputHeaders",
          "delimiter"
        ]
      },
      "formatTimes": {
        "type": "object",
        "additionalProperties": false,
        "title": "Format Times",
        "description": "Formats times of the specified input into HH:mm:ss",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "inputFormat": {
            "type": "string",
            "title": "Input Format",
            "description": "The time format pattern of the input values (in accordance with java.time.format.DateTimeFormatter)."
          },
          "inputLocale": {
            "type": "string",
            "title": "Input Locale",
            "description": "The locale of the input values."
          }
        },
        "required": [
          "inputHeaders"
        ]
      },
      "ignoreColumns": {
        "type": "object",
        "additionalProperties": false,
        "title": "Ignore Columns",
        "description": "Remove the given column(s) from the data set",
        "properties": {
          "columns": {
            "type": "array",
            "additionalItems": false,
            "title": "Columns to be removed from the data set",
            "description": "Remove the given column(s) from the data set",
            "items": {
              "type": "string",
              "description": "The column to remove"
            }
          }
        },
        "required": [
          "columns"
        ]
      },
      "mapPublisherCategories": {
        "type": "object",
        "additionalProperties": false,
        "title": "Map Publisher Categories",
        "description": "Converts your Publisher Input Category IDs to Yext Categories",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "publisherId": {
            "type": "string",
            "title": "Publisher",
            "description": "The Publisher of your data source",
            "enum": [
              "GOOGLEMYBUSINESS",
              "FACEBOOK",
              "BING",
              "TRIPADVISORREVIEWS"
            ]
          }
        },
        "required": [
          "inputHeaders",
          "publisherId"
        ]
      },
      "aIDataCleaning": {
        "type": "object",
        "additionalProperties": false,
        "title": "AI Data Cleaning",
        "description": "Clean your data with an AI model generated by providing sample inputs and outputs.",
        "properties": {
          "inputHeader": {
            "type": "string",
            "title": "Input Column Header",
            "description": "The header of the column to transform with the AI model."
          },
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The header for the new column that will be populated with the transformed data. If no header is provided, then the transformed data will overwrite the input column."
          },
          "taskDescription": {
            "type": "string",
            "title": "Task Description",
            "description": "A description of the type of data transformation."
          },
          "inputLabel": {
            "type": "string",
            "title": "Input Label",
            "description": "A label that describes the input data, e.g., Product URL."
          },
          "outputLabel": {
            "type": "string",
            "title": "Output Label",
            "description": "A label that describes your output data, e.g., Product Category."
          },
          "inputOutputExamples": {
            "type": "array",
            "title": "Input / Output Examples",
            "description": "Sample input and output values to generate a model.",
            "items": {
              "type": "object",
              "properties": {
                "input": {
                  "type": "string",
                  "title": "Input",
                  "description": "The sample input value."
                },
                "output": {
                  "type": "string",
                  "title": "Output",
                  "description": "The sample output value."
                }
              },
              "required": [
                "input",
                "output"
              ],
              "additionalProperties": false
            },
            "uniqueItems": true,
            "minItems": 3,
            "maxItems": 3
          }
        },
        "required": [
          "inputHeader",
          "taskDescription",
          "inputLabel",
          "outputLabel",
          "inputOutputExamples"
        ]
      },
      "duplicateColumn": {
        "type": "object",
        "additionalProperties": false,
        "title": "Duplicate Column",
        "description": "Duplicate a column to create a new column with the same data.",
        "properties": {
          "inputHeader": {
            "type": "string",
            "title": "Input Column Header",
            "description": "The column containing the data that needs to be duplicated."
          },
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The header for the new column that will be populated with duplicated data"
          }
        },
        "required": [
          "inputHeader",
          "newColumnHeader"
        ]
      },
      "functionOnARow": {
        "type": "object",
        "additionalProperties": false,
        "title": "Function on a Row",
        "description": "Invokes a custom Typescript function to transform an entire row of data.",
        "properties": {
          "plugin": {
            "type": "string",
            "title": "Plugin",
            "description": "The reference to a Plugin resource that contains a desired function.",
            "format": "platform/plugin"
          },
          "function": {
            "type": "string",
            "title": "Function",
            "description": "The function to invoke."
          },
          "inputMappings": {
            "type": "array",
            "title": "Input Mappings",
            "additionalItems": false,
            "description": "The Column headers containing the values to map to the specified input Keys in the function.",
            "items": {
              "$ref": "#/definitions/transform/keyHeaderMapping"
            }
          },
          "outputMappings": {
            "type": "array",
            "title": "Output Mappings",
            "additionalItems": false,
            "description": "The Column headers containing the values to map to the specified output Keys in the function.",
            "items": {
              "$ref": "#/definitions/transform/keyHeaderMapping"
            }
          },
          "dropUnspecifiedOutputColumns": {
            "type": "boolean",
            "title": "Drop Unspecified Output Columns",
            "description": "If true, any columns not specified as part of the output of the function will be dropped from the table.",
            "default": "false"
          }
        },
        "required": [
          "outputMappings",
          "plugin",
          "function"
        ]
      },
      "keyHeaderMapping": {
        "type": "object",
        "title": "Key-Header Mapping",
        "additionalProperties": false,
        "description": "The mapping between a key defined in the function and a Column Header within the Connector.",
        "properties": {
          "functionKey": {
            "type": "string",
            "title": "Function Key",
            "description": "The Key that your function specifies."
          },
          "columnHeader": {
            "type": "string",
            "title": "Column Header",
            "description": "The Column Header that contains data that maps to the value of the key in your function."
          }
        },
        "required": [
          "functionKey",
          "columnHeader"
        ]
      },
      "conditionalExecution": {
        "type": "object",
        "additionalProperties": false,
        "title": "Conditional Execution",
        "description": "Specifies the logic driving the conditional execution of a transform on a given row.",
        "properties": {
          "clause": {
            "$ref": "#/definitions/transform/clause"
          }
        },
        "required": [
          "clause"
        ]
      },
      "clause": {
        "type": "object",
        "additionalProperties": false,
        "title": "Clause",
        "description": "Specifies a set of conditions, and the operator to join them on if more than one condition is present.",
        "properties": {
          "boolOperator": {
            "type": "string",
            "title": "Boolean Operator",
            "description": "Specifies whether to join conditions via AND or OR logic.",
            "enum": [
              "AND",
              "OR"
            ]
          },
          "conditions": {
            "type": "array",
            "additionalProperties": false,
            "title": "Conditions",
            "description": "Specifies the conditions that must be met in order for the transform to be executed on a given row.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "title": "Condition",
              "description": "A condition that must be met in order for the transform to be executed.",
              "properties": {
                "inputColumn": {
                  "type": "string",
                  "title": "Input Column",
                  "description": "The input column containing the value for the condition to meet."
                },
                "comparator": {
                  "type": "string",
                  "title": "Comparator",
                  "description": "The comparator used when specifying a condition to be met.",
                  "enum": [
                    "CONTAINS",
                    "STARTS_WITH",
                    "ENDS_WITH",
                    "EQUALS",
                    "DOES_NOT_EQUAL",
                    "IS_NOT_BLANK",
                    "DOES_NOT_CONTAIN",
                    "IS_BLANK",
                    "MATCHES_REGEX",
                    "GREATER_THAN",
                    "GREATER_THAN_OR_EQUAL_TO",
                    "LESS_THAN",
                    "LESS_THAN_OR_EQUAL_TO"
                  ]
                },
                "comparisonValue": {
                  "type": "string",
                  "title": "Comparison Value",
                  "description": "The value to compare the input column to to determine if the condition is met. Column headers may be embedded here."
                }
              },
              "required": [
                "inputColumn",
                "comparator"
              ]
            },
            "minItems": 1
          }
        },
        "required": [
          "conditions"
        ]
      },
      "checkEntityExistence": {
        "type": "object",
        "additionalProperties": false,
        "title": "Check Entity Existence",
        "description": "Adds a column that checks whether a row represents an entity that currently exists in your Knowledge Graph, by returning a value of true or false.",
        "properties": {
          "inputHeader": {
            "type": "string",
            "title": "Input Column Header",
            "description": "The column that contains the value for Entity ID."
          },
          "newColumnHeader": {
            "type": "string",
            "title": "New Column Header",
            "description": "The header of your new column that will be populated with true/false values, based on whether the entity ID provided exists or does not exist in your Knowledge Graph."
          }
        },
        "required": [
          "inputHeader",
          "newColumnHeader"
        ]
      },
      "convertToRichText": {
        "type": "object",
        "additionalProperties": false,
        "title": "Convert to Rich Text",
        "description": "Convert your data to the JSON AST format to populate fields of type Rich Text v2.",
        "properties": {
          "inputHeaders": {
            "$ref": "#/definitions/transform/inputHeaders"
          },
          "inputFormat": {
            "type": "string",
            "title": "Input Format",
            "description": "The input format of your data, either HTML or Markdown.",
            "enum": [
              "HTML",
              "MARKDOWN"
            ]
          }
        },
        "required": [
          "inputHeaders",
          "inputFormat"
        ]
      }
    },
    "transforms": {
      "type": "array",
      "additionalItems": false,
      "title": "Transforms",
      "description": "Transforms to sequentially apply to data produced by selectors.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "title": "Transform",
        "description": "A transform to apply to the data output by the previous step.",
        "unordered": false,
        "properties": {
          "applyTemplateFields": {
            "$ref": "#/definitions/transform/applyTemplateFields"
          },
          "fixCapitalization": {
            "$ref": "#/definitions/transform/fixCapitalization"
          },
          "removeUnwantedChars": {
            "$ref": "#/definitions/transform/removeUnwantedChars"
          },
          "extractText": {
            "$ref": "#/definitions/transform/extractText"
          },
          "function": {
            "$ref": "#/definitions/transform/function"
          },
          "findAndReplace": {
            "$ref": "#/definitions/transform/findAndReplace"
          },
          "addColumn": {
            "$ref": "#/definitions/transform/addColumn"
          },
          "filterRows": {
            "$ref": "#/definitions/transform/filterRows"
          },
          "formatDates": {
            "$ref": "#/definitions/transform/formatDates"
          },
          "mergeColumns": {
            "$ref": "#/definitions/transform/mergeColumns"
          },
          "splitColumn": {
            "$ref": "#/definitions/transform/splitColumn"
          },
          "fillInEmptyCells": {
            "$ref": "#/definitions/transform/fillInEmptyCells"
          },
          "splitIntoRows": {
            "$ref": "#/definitions/transform/splitIntoRows"
          },
          "formatTimes": {
            "$ref": "#/definitions/transform/formatTimes"
          },
          "ignoreColumns": {
            "$ref": "#/definitions/transform/ignoreColumns"
          },
          "mapPublisherCategories": {
            "$ref": "#/definitions/transform/mapPublisherCategories"
          },
          "aIDataCleaning": {
            "$ref": "#/definitions/transform/aIDataCleaning"
          },
          "duplicateColumn": {
            "$ref": "#/definitions/transform/duplicateColumn"
          },
          "functionOnARow": {
            "$ref": "#/definitions/transform/functionOnARow"
          },
          "conditionalExecution": {
            "$ref": "#/definitions/transform/conditionalExecution"
          },
          "checkEntityExistence": {
            "$ref": "#/definitions/transform/checkEntityExistence"
          },
          "convertToRichText": {
            "$ref": "#/definitions/transform/convertToRichText"
          }
        },
        "oneOf": [
          {
            "required": [
              "applyTemplateFields"
            ]
          },
          {
            "required": [
              "fixCapitalization"
            ]
          },
          {
            "required": [
              "removeUnwantedChars"
            ]
          },
          {
            "required": [
              "extractText"
            ]
          },
          {
            "required": [
              "function"
            ]
          },
          {
            "required": [
              "findAndReplace"
            ]
          },
          {
            "required": [
              "addColumn"
            ]
          },
          {
            "required": [
              "filterRows"
            ]
          },
          {
            "required": [
              "formatDates"
            ]
          },
          {
            "required": [
              "mergeColumns"
            ]
          },
          {
            "required": [
              "splitColumn"
            ]
          },
          {
            "required": [
              "fillInEmptyCells"
            ]
          },
          {
            "required": [
              "splitIntoRows"
            ]
          },
          {
            "required": [
              "formatTimes"
            ]
          },
          {
            "required": [
              "ignoreColumns"
            ]
          },
          {
            "required": [
              "mapPublisherCategories"
            ]
          },
          {
            "required": [
              "aIDataCleaning"
            ]
          },
          {
            "required": [
              "duplicateColumn"
            ]
          },
          {
            "required": [
              "functionOnARow"
            ]
          },
          {
            "required": [
              "checkEntityExistence"
            ]
          },
          {
            "required": [
              "convertToRichText"
            ]
          }
        ]
      }
    },
    "fieldFormatConfig": {
      "type": "object",
      "title": "Field Format Configuration",
      "additionalProperties": false,
      "description": "The configuration of the field format",
      "properties": {
        "listDelimiter": {
          "type": "string",
          "title": "List Delimiter",
          "description": "The delimiter for the list field."
        },
        "fieldDataFormat": {
          "type": "string",
          "title": "Field Data Format",
          "description": "The field data format.",
          "enum": [
            "FIELD_DATA_FORMAT_UNSPECIFIED",
            "HOURS_API_FORMAT",
            "HOURS_INTERVAL_FORMAT",
            "HOLIDAY_HOURS_API_FORMAT",
            "HOLIDAY_HOURS_INTERVAL_FORMAT",
            "HOLIDAY_HOURS_COMBINED_DATE_TIME_FORMAT"
          ]
        }
      }
    },
    "mapping": {
      "type": "object",
      "description": "The mapping generated by the transformers.",
      "properties": {
        "fieldFormatConfig": {
          "$ref": "#/definitions/fieldFormatConfig"
        },
        "clearValueIfBlank": {
          "type": "boolean",
          "title": "Clear Value if Blank",
          "description": "If true, blank values that are mapped to a field will clear existing field content.",
          "default": false
        }
      },
      "oneOf": [
        {
          "properties": {
            "header": {
              "type": "string",
              "title": "Header",
              "description": "Header of a table."
            },
            "field": {
              "type": "string",
              "title": "Field",
              "description": "The reference to the field resource."
            },
            "subfieldPath": {
              "$ref": "#/definitions/subfieldPath"
            },
            "listSettings": {
              "type": "string",
              "title": "List Settings",
              "description": "Describes how a list should be updated.",
              "enum": [
                "ADD_TO_EXISTING",
                "REPLACE_EXISTING"
              ]
            }
          },
          "required": [
            "header",
            "field"
          ]
        },
        {
          "type": "object",
          "properties": {
            "header": {
              "type": "string"
            },
            "variable": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "subfieldPath": {
                  "$ref": "#/definitions/subfieldPath"
                }
              },
              "required": [
                "id"
              ]
            }
          },
          "required": [
            "header",
            "variable"
          ]
        },
        {
          "type": "object",
          "properties": {
            "header": {
              "type": "string"
            },
            "apiConfigIdentifier": {
              "type": "boolean"
            }
          },
          "required": [
            "header",
            "apiConfigIdentifier"
          ],
          "additionalProperties": false
        }
      ]
    },
    "selector": {
      "type": "object",
      "additionalProperties": false,
      "description": "A selector for extracting content.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of data selector.",
          "enum": [
            "CSS",
            "XPATH",
            "JSON",
            "PAGE_URL",
            "PAGE_TITLE",
            "CLEANED_BODY",
            "PAGE_ID",
            "ITEM_ID",
            "AUTHOR",
            "CREATED_DATE",
            "COLUMN",
            "FIELD"
          ]
        },
        "header": {
          "type": "string",
          "title": "Header",
          "description": "The header used to identify the extracted content."
        },
        "path": {
          "type": "string",
          "title": "Path",
          "description": "The selector content path."
        },
        "column": {
          "type": "object",
          "additionalProperties": false,
          "title": "Column",
          "description": "The specific table column from which to select values.",
          "properties": {
            "index": {
              "type": "number",
              "title": "Index",
              "description": "The zero-base column index."
            },
            "header": {
              "type": "string",
              "title": "Header",
              "description": "The header based column content."
            }
          },
          "oneOf": [
            {
              "required": [
                "index"
              ]
            },
            {
              "required": [
                "header"
              ]
            }
          ]
        },
        "mode": {
          "type": "string",
          "description": "The selector mode of a CSS or XPath selector.",
          "enum": [
            "ALL_TEXT",
            "DIRECT_TEXT",
            "INNER_HTML",
            "URL",
            "IMAGE_URL",
            "ATTRIBUTE"
          ]
        },
        "attributeKey": {
          "type": "string",
          "title": "Attribute Key",
          "description": "The attribute key of a CSS or XPath selector."
        },
        "fieldId": {
          "type": "string",
          "title": "Field ID",
          "description": "The ID of the field to extract content from."
        },
        "subfieldPath": {
          "$ref": "#/definitions/subfieldPath"
        }
      },
      "required": [
        "type",
        "header"
      ]
    },
    "customSchedule": {
      "type": "object",
      "title": "Custom Schedule",
      "description": "The custom schedule that the Connector will follow. The Connector can be configured to run hourly, daily, weekly, monthly or a custom frequency. Currently, this is only supported for API Connectors.",
      "properties": {
        "timeZone": {
          "type": "string",
          "title": "Time Zone",
          "description": "The time zone in ISO-8601 Zone-ID to start a run, i.e. America/New_York."
        },
        "startDate": {
          "type": "string",
          "title": "Start Date",
          "description": "The local date in ISO format to start scheduling runs, i.e. 2021-01-30."
        },
        "startTime": {
          "type": "string",
          "title": "Start Time",
          "description": "The local time in ISO format to start scheduling runs, i.e. 12:00:00."
        },
        "frequencyType": {
          "type": "string",
          "title": "Frequency Type",
          "description": "The schedule config frequency type.",
          "enum": [
            "HOURLY",
            "DAILY",
            "MONTHLY",
            "WEEKLY"
          ]
        },
        "repeatInterval": {
          "type": "number",
          "title": "Repeat interval",
          "description": "The repeat interval based off the schedule config frequency type. If unset, a repeat interval of 1 will be used (e.g. every day)."
        }
      },
      "required": [
        "timeZone",
        "startDate",
        "startTime",
        "frequencyType"
      ]
    },
    "searchByCriteria": {
      "type": "object",
      "additionalProperties": false,
      "title": "Search By Criteria",
      "description": "The criteria used to search through your Server to find a specific file.",
      "properties": {
        "lastModified": {
          "type": "string",
          "title": "Last Modified",
          "description": "The file that matches the criteria that is either the most recently modified or least recently modified.",
          "enum": [
            "NEWEST",
            "OLDEST"
          ]
        },
        "folderPath": {
          "type": "string",
          "title": "Folder Path",
          "description": "The path to the folder containing your file."
        },
        "searchPattern": {
          "type": "string",
          "title": "Search Pattern",
          "description": "The search pattern rule by which to filter files by name.",
          "enum": [
            "NONE",
            "CONTAINS",
            "STARTS_WITH",
            "ENDS_WITH",
            "REGEX"
          ]
        },
        "regex": {
          "type": "string",
          "title": "Regex",
          "description": "The regex by which to filter files."
        }
      },
      "required": [
        "lastModified",
        "folderPath"
      ],
      "dependentRequired": {
        "searchPattern": [
          "regex"
        ]
      }
    },
    "subfieldPath": {
      "type": "array",
      "title": "Subfield Path",
      "additionalItems": false,
      "description": "Path to a particular property or list item index. Includes field format settings if applicable.",
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "A name which identifies a struct value property."
          },
          "index": {
            "type": "number",
            "title": "Index",
            "description": "An index which identifies an item in a list value."
          },
          "fieldFormatConfig": {
            "$ref": "#/definitions/fieldFormatConfig"
          }
        },
        "oneOf": [
          {
            "required": [
              "name"
            ]
          },
          {
            "required": [
              "index"
            ]
          }
        ]
      }
    },
    "runBreaker": {
      "type": "object",
      "additionalProperties": false,
      "title": "Run Breaker",
      "description": "The configuration for a Run Breaker.",
      "properties": {
        "comparator": {
          "type": "string",
          "title": "Comparator",
          "description": "The comparator for your breaker.",
          "enum": [
            "EQUAL_TO",
            "GREATER_THAN",
            "GREATER_THAN_OR_EQUAL_TO",
            "LESS_THAN",
            "LESS_THAN_OR_EQUAL_TO"
          ]
        },
        "bound": {
          "type": "number",
          "title": "Bound",
          "description": "The numerical bound for your breaker.",
          "minimum": 0
        },
        "boundType": {
          "type": "string",
          "title": "Bound Type",
          "description": "Whether the designated bound represents an absolute or relative (percentage) value.",
          "enum": [
            "RELATIVE",
            "ABSOLUTE"
          ]
        },
        "entitySet": {
          "type": "object",
          "title": "Entity Set",
          "description": "The set of entities to consider when breaking the run. This is either entities in the Run, within a specified Saved Filter, or from the Comprehensive Set.",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "CURRENT_RUN",
                "SAVED_FILTER",
                "COMPREHENSIVE_SET"
              ]
            },
            "savedFilter": {
              "type": "string",
              "title": "Saved Filter",
              "description": "The reference to the saved filter resource if entity set type is set to saved filter.",
              "format": "km/saved-filter"
            }
          },
          "required": [
            "type"
          ]
        },
        "entityFilter": {
          "type": "object",
          "title": "Entity Filter",
          "description": "A filter on the number of entities that count toward the Run Breaker. This can be whether an entity is new, existing, present in the source of the run, missing from the Comprehensive Set, OR based on value of a mapped Column Header.",
          "properties": {
            "statusFilter": {
              "type": "string",
              "enum": [
                "NEW",
                "EXISTING",
                "PRESENT_IN_SOURCE",
                "MISSING"
              ]
            },
            "fieldFilter": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "field": {
                  "type": "string",
                  "title": "Field",
                  "description": "The reference to the field resource."
                },
                "subfieldPath": {
                  "$ref": "#/definitions/subfieldPath"
                },
                "comparator": {
                  "type": "string",
                  "title": "Comparator",
                  "description": "The comparator for your field value.",
                  "enum": [
                    "IS_BLANK",
                    "IS_NOT_BLANK",
                    "EQUAL_TO",
                    "DOES_NOT_EQUAL",
                    "CONTAINS",
                    "DOES_NOT_CONTAIN",
                    "GREATER_THAN",
                    "GREATER_THAN_OR_EQUAL_TO",
                    "LESS_THAN",
                    "LESS_THAN_OR_EQUAL_TO",
                    "STARTS_WITH",
                    "ENDS_WITH"
                  ]
                },
                "value": {
                  "type": "string",
                  "title": "Value",
                  "description": "The value to compare against your field value."
                }
              },
              "required": [
                "field",
                "comparator"
              ]
            }
          },
          "oneOf": [
            {
              "required": [
                "statusFilter"
              ]
            },
            {
              "required": [
                "fieldFilter"
              ]
            }
          ]
        }
      },
      "required": [
        "comparator",
        "bound",
        "boundType",
        "entitySet",
        "entityFilter"
      ]
    },
    "fieldHeaderMapping": {
      "type": "object",
      "title": "Field-Header Mapping",
      "additionalProperties": false,
      "description": "The mapping between a field in your template and a Column Header within the Connector.",
      "properties": {
        "fieldId": {
          "type": "string",
          "title": "Field ID",
          "description": "The ID of the field in the template to apply."
        },
        "subfieldPath": {
          "$ref": "#/definitions/subfieldPath"
        },
        "columnHeader": {
          "type": "string",
          "title": "Column Header",
          "description": "The Column Header that should be populated with the template value for the given field."
        }
      },
      "required": [
        "fieldId",
        "columnHeader"
      ]
    },
    "runMode": {
      "type": "string",
      "title": "Run Mode",
      "description": "Indicates the run mode.",
      "enum": [
        "DEFAULT",
        "COMPREHENSIVE"
      ]
    },
    "dryRun": {
      "type": "boolean",
      "title": "Dry Run",
      "description": "Indicates whether the run is a dry run."
    },
    "linkedConnectorConfig": {
      "type": "object",
      "title": "Linked Connector Config",
      "additionalProperties": false,
      "description": "The configuration of a linked connector\u0027s completed run triggering this connector to run.",
      "properties": {
        "connector": {
          "type": "string",
          "title": "Connector",
          "format": "km/connector",
          "description": "The reference to the connector whose completed runs will trigger this connector."
        },
        "runMode": {
          "$ref": "#/definitions/runMode"
        },
        "dryRun": {
          "$ref": "#/definitions/dryRun"
        }
      },
      "required": [
        "connector",
        "runMode"
      ]
    },
    "endpointConfig": {
      "type": "object",
      "title": "Endpoint Configuration",
      "description": "The configuration of an endpoint.",
      "properties": {
        "method": {
          "type": "string",
          "description": "The HTTP method type.",
          "enum": [
            "PUT",
            "POST",
            "PATCH"
          ]
        },
        "url": {
          "type": "string",
          "title": "URL",
          "description": "The request URL to use. Any path variables provided will be replaced to generate the final URL."
        },
        "queryParams": {
          "type": "object",
          "title": "Query Params",
          "description": "Optional query parameters to pass along with the API request. Query Params may contain variables that can be mapped to.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "headers": {
          "type": "object",
          "title": "Headers",
          "description": "Optional headers to pass along with the API request. Headers may contain variables that can be mapped to.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestBody": {
          "title": "Request Body",
          "description": "Represents the request body for a given API.",
          "oneOf": [
            {
              "type": "object",
              "title": "Object",
              "description": "The JSON body for PUT/POST requests that contain mapping keys that need to be substituted."
            },
            {
              "type": "array",
              "title": "List",
              "description": "The JSON list for PUT/POST requests that contain mapping keys that need to be substituted."
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "method",
        "url"
      ]
    },
    "stringType": {
      "type": "string",
      "enum": [
        "STRING_DEFAULT",
        "STRING_LINKED_ACCOUNT"
      ]
    },
    "numberType": {
      "type": "string",
      "enum": [
        "NUMBER_DEFAULT"
      ]
    },
    "booleanType": {
      "type": "string",
      "enum": [
        "BOOLEAN_DEFAULT"
      ]
    },
    "listType": {
      "type": "object",
      "properties": {
        "stringType": {
          "$ref": "#/definitions/stringType"
        },
        "booleanType": {
          "$ref": "#/definitions/booleanType"
        },
        "numberType": {
          "$ref": "#/definitions/numberType"
        }
      },
      "maxProperties": 1,
      "additionalProperties": false
    },
    "type": {
      "type": "object",
      "properties": {
        "stringType": {
          "$ref": "#/definitions/stringType"
        },
        "booleanType": {
          "$ref": "#/definitions/booleanType"
        },
        "numberType": {
          "$ref": "#/definitions/numberType"
        },
        "listType": {
          "$ref": "#/definitions/listType"
        }
      },
      "additionalProperties": false,
      "minProperties": 1,
      "maxProperties": 1
    },
    "variableDefinition": {
      "type": "object",
      "title": "Variable Definition",
      "description": "Represents arbitrary keys that can be used in an API Config to represent dynamic values",
      "properties": {
        "name": {
          "type": "string",
          "description": "Identifies the name of a variable."
        },
        "type": {
          "description": "Identifies the type of a variable.",
          "$ref": "#/definitions/type"
        }
      },
      "required": [
        "name"
      ]
    }
  }
}